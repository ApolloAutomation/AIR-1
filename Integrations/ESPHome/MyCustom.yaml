api:
  encryption:
    key: !secret api-key    

dashboard_import:
  package_import_url: github://ApolloAutomation/AIR-1/Integrations/ESPHome/AIR-1.yaml@main
  import_full_config: true

text_sensor:
    # Convert VOC Index To Text: 
    # https://sensirion.com/media/documents/02232963/6294E043/Info_Note_VOC_Index.pdf
    # https://sensirion.com/media/documents/ACD82D45/6294DFC0/Info_Note_Integration_VOC_NOx_Sensor.pdf
  - platform: template
    name: "VOC Quality"
    id: voc_quality
    icon: mdi:air-filter
    lambda: |-
      if (id(sen55_voc).state < 150) {
        return std::string("Good");} 
      else if (id(sen55_voc).state < 250) {
        return std::string("Moderate");} 
      else if (id(sen55_voc).state < 350) {
        return std::string("High");} 
      else {
        return std::string("Very High");}
        
    # Convert PM2.5 Index To Text: 
  - platform: template
    name: "PM2.5 AQI"
    id: pm2_5_quality
    icon: mdi:air-filter
    lambda: |-
      if (id(pm_2_5).state < 9.1) {
        return std::string("Good");} 
      else if (id(pm_2_5).state < 36) {
        return std::string("Moderate");} 
      else if (id(pm_2_5).state < 57) {
        return std::string("Unhealthy for Sens Grps");} 
      else if (id(pm_2_5).state < 151) {
        return std::string("Unhealthy");} 
      else if (id(pm_2_5).state < 251) {
        return std::string("Very Unhealthy");} 
      else {
        return std::string("Hazardous");}
        
    # Convert PM 1-2.5 Index To Text: 
  - platform: template
    name: "PM 1-2.5 AQI"
    id: pm1_to_2_5_quality
    icon: mdi:air-filter
    lambda: |-
      if (id(pm1_to_2_5).state < 9.1) {
        return std::string("Good");} 
      else if (id(pm1_to_2_5).state < 36) {
        return std::string("Moderate");} 
      else if (id(pm1_to_2_5).state < 57) {
        return std::string("Unhealthy for Sens Grps");} 
      else if (id(pm1_to_2_5).state < 151) {
        return std::string("Unhealthy");} 
      else if (id(pm1_to_2_5).state < 251) {
        return std::string("Very Unhealthy");} 
      else {
        return std::string("Hazardous");}

light:
    effects:
      - random:
      - random:
          name: Random Effect With Custom Values
          transition_length: 5s
          update_interval: 7s
      - addressable_rainbow:
      - addressable_rainbow:
          name: Rainbow Effect With Custom Values
          speed: 10
          width: 50
      - addressable_color_wipe:
      - addressable_color_wipe:
          name: Color Wipe Effect With Custom Values
          colors:
            - red: 100%
              green: 100%
              blue: 100%
              num_leds: 5
              gradient: true
            - red: 0%
              green: 0%
              blue: 0%
              num_leds: 1
          add_led_interval: 100ms
          reverse: false
      - addressable_random_twinkle:
      - addressable_random_twinkle:
          name: Random Twinkle Effect With Custom Values
          twinkle_probability: 5%
          progress_interval: 32ms
      - flicker:
          name: Flicker Effect With Custom Values
          alpha: 95%
          intensity: 1.5%



